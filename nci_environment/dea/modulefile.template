#%Module########################################################################
##
## ${module_name} modulefile
##

proc ModulesHelp { } {
        global version

        puts stderr "   ${module_description}"
        puts stderr "   Version ${module_version}"
}

set name          ${module_name}
set version       ${module_version}
set base          ${module_path}

module-whatis   "${module_description} ${module_version}"

# Enable segfault tracebacks in py3. https://docs.python.org/3/library/faulthandler.html
setenv PYTHONFAULTHANDLER 1

# Set PYTHONUSERBASE based on the version of dea module.
# This allows users to install python packages with "pip install --user <package>",
setenv PYTHONUSERBASE ~/.dea-sandbox/${module_name}/${module_version}/local
setenv GDAL_DATA ${module_path}/share/gdal
setenv PROJ_LIB ${module_path}/share/proj
setenv PROJ_NETWORK ON
setenv UDUNITS2_XML_PATH ${module_path}/share/udunits/udunits2.xml
setenv GSETTINGS_SCHEMA_DIR ${module_path}/share/glib-2.0/schemas

if {[module-info mode load] && [info exists env(PYTHONPATH)] && $$env(PYTHONPATH) != ""} {
        puts stderr "Warning: ${module_name}/${module_version} exists in the python env ($$env(PYTHONPATH))"
        puts stderr "Unload all python modules, if you experience any issues."
}

prepend-path PYTHONPATH ${module_path}/share/qgis/python

# Remove duplicate entries for module path dir and prepend again
remove-path PATH ${module_path}/bin
prepend-path PATH ${module_path}/bin

# Remove duplicate entries for python path and prepend again
remove-path PYTHONPATH ${python_path}
prepend-path PYTHONPATH ${python_path}

# To avoid user packages conflicting with Environment Module packages, point the PYTHONUSERBASE and PATH
# variables to point to a directory based on the Environment Module version which is loaded so that extra
# packages must be re-installed when a new dea module is released
# Remove duplicate entries for HOME dir and prepend again
remove-path PATH ~/.dea-sandbox/${module_name}/${module_version}/local/bin
prepend-path PATH ~/.dea-sandbox/${module_name}/${module_version}/local/bin

setenv DATACUBE_CONFIG_PATH ${module_path}/datacube.conf
setenv LC_ALL en_AU.utf8
setenv LANG C.UTF-8

setenv DEA_TOOLS_TIDE_MODELS /g/data/v10/tide_models

if {[module-info mode load] && [is-loaded $$name/$$version]} {
        puts stderr "Warning: $$name/$$version exists in the python env ($$env(PYTHONPATH))"
}

# Remove duplicate entries for HOME dir and prepend at the top
remove-path PYTHONPATH ~/.dea-sandbox/${module_name}/${module_version}/local/lib/python3.10/site-packages
prepend-path PYTHONPATH ~/.dea-sandbox/${module_name}/${module_version}/local/lib/python3.10/site-packages


#############################################################
# For users new to gadi, but that did have access on raijin, attempt to
# copy their backed up ~/.pgpass file.
#------------------------------------------------------------
if [string match "gadi*" [info hostname]] {
    if {! [file exists ~/.pgpass]} {
        set oldpgpass [lindex [glob -nocomplain ~/raijin_home*/*/.pgpass] 0]
        if [file exists $$oldpgpass] {
            puts "Attempting to copy raijin .pgpass to ~/.pgpass for DEA Database Access"
            file copy $$oldpgpass [pwd]
        }
    }
}


#############################################################
# When loading, ensure a database username has been created
# and warn if a ~/.datacube.conf file exists
#

if [module-info mode load] {
    if [catch {exec -ignorestderr ${module_path}/bin/datacube-ensure-user.py ${dbhost} ${dbport}} results options ] {
        puts stderr "Error: database connection check failed!"
        puts stderr "  see log above for more details"
    }

    if [file exists ~/.datacube.conf] {
        puts stderr "Warning: ~/.datacube.conf detected"
        puts stderr "  it might conflict with this module"
        puts stderr "  consider removing or renaming it"
    }
}

################################################################
# Log access to this module, so that we know when old versions can
# safely be removed

set sqlstr "insert into dea_module_loaded (module, username, host) values ('$$name/$$version', '$$env(USER)', '[info hostname]');"
set ::env(PGPASSWORD) guest
exec psql -X -h dea-db.nci.org.au -c $$sqlstr guest guest
