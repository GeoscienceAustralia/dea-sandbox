name: Sandbox build and push latest

on:
  push:
    paths:
      - 'docker/**'
      - '.trivyignore'
      - '.github/workflows/docker-sandbox-cache.yml'
      - '.github/workflows/bin/**'
  pull_request:
    paths:
      - 'docker/**'
      - '.trivyignore'
      - '.github/workflows/docker-sandbox-cache.yml'
      - '.github/workflows/bin/**'

env:
  ORG: geoscienceaustralia
  IMAGE: sandbox
  IMAGE_DEV: sandbox-dev
  DOCKER_USER: gadockersvc

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Update PATH
      run: |
        echo "::add-path::${GITHUB_WORKSPACE}/.github/workflows/bin"

    - name: Config
      id: cfg
      run: |
        ci-helper export_cfg

    - name: Env Dump (for debugging)
      run: |
        echo branch: ${BRANCH}
        echo stage1: ${im_stage1} ${im_stage1_fallback}
        echo stage2: ${im_stage2} ${im_stage2_fallback}
        echo build_info: ${build_info}
        echo push_image: cfg:${{ steps.cfg.outputs.push_image }} env:$push_image
        echo push_cache: cfg:${{ steps.cfg.outputs.push_cache }} env:$push_cache
        echo pull_cache: cfg:${{ steps.cfg.outputs.pull_cache }} env:$pull_cache

    - name: DockerHub Login
      if: steps.cfg.outputs.push_cache == 'yes' || steps.cfg.outputs.push_image == 'yes'
      run: |
        echo "Login to DockerHub as ${DOCKER_USER}"
        echo "${{ secrets.DockerPassword }}" | docker login -u "${DOCKER_USER}" --password-stdin

    - name: Pull Cache (stage1)
      if: steps.cfg.outputs.pull_cache == 'yes'
      run: |
        ci-helper pull_docker_cache ${im_stage1} ${im_stage1_fallback}

    - name: Build Sandbox Docker (stage1)
      run: |
        # build and cache first stage (env_builder)
        docker build \
          --target env_builder \
          --cache-from ${im_stage1} \
          --tag        ${im_stage1} \
          ./docker/

    - name: DockerHub Push Cache (stage1)
      if: steps.cfg.outputs.push_cache == 'yes'
      run: |
        docker push ${im_stage1}

    - name: Pull Cache (stage2)
      if: steps.cfg.outputs.pull_cache == 'yes'
      run: |
        # Remove old layers first to help with disk usage
        echo "Before Prune:"
        docker images
        docker system prune --force
        echo "After Prune:"
        docker images
        ci-helper pull_docker_cache ${im_stage2} ${im_stage2_fallback}
        echo "After Pull:"
        docker images

    - name: Build Sandbox Docker (stage2)
      run: |
        # now build second stage making sure first stage is from cache
        set -o pipefail
        docker build \
          --build-arg BUILD_INFO="${build_info}" \
          --cache-from ${im_stage1} \
          --cache-from ${im_stage2} \
          --tag        ${im_stage2} \
          ./docker/ 2>&1 | tee docker-build.log || {
              echo "Docker build failed"
              tail docker-build.log

              if grep "no space left on device" docker-build.log 2>&1 > /dev/null ; then
                echo "Out of disk, will retry without cache"
                docker rmi ${im_stage2}
                docker system prune
                docker images
                docker build \
                  --build-arg BUILD_INFO="${build_info}" \
                  --cache-from ${im_stage1} \
                  --tag        ${im_stage2} \
                  ./docker/
              else
                # some other error, just fail this step
                false
              fi
          }

    - name: DockerHub Push Image (stage2)
      if: steps.cfg.outputs.push_image == 'yes'
      run: |
        docker push ${im_stage2}

    - name: Build Sandbox Docker (sudo)
      run: |
        im_sudo=${im_stage2/:/:sudo-}
        docker build \
          --build-arg WITH_SUDO=yes \
          --build-arg BUILD_INFO="${build_info} (sudo)" \
          --cache-from ${im_stage1} \
          --cache-from ${im_stage2} \
          --tag        ${im_sudo} \
          ./docker/

    - name: DockerHub Push Image (sudo)
      if: steps.cfg.outputs.push_image == 'yes'
      run: |
        im_sudo=${im_stage2/:/:sudo-}
        docker push ${im_sudo}


    - name: Push Extra tags (not all branches)
      if: steps.cfg.outputs.im_extra != '' && steps.cfg.outputs.push_image == 'yes'
      run: |
        im_sudo=${im_stage2/:/:sudo-}
        im_sudo_extra=${im_extra/:/:sudo-}
        docker tag "${im_stage2}" "${im_extra}"
        docker tag "${im_sudo}" "${im_sudo_extra}"

        docker push "${im_extra}"
        docker push "${im_sudo_extra}"

    - name: Run vulnerability scanner
      uses: aquasecurity/trivy-action@0.0.6
      with:
        image-ref: ${{steps.cfg.outputs.im_stage2}}
        format: "table"
        exit-code: "1"
        severity: "CRITICAL,HIGH"
